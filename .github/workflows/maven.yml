# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build rackshift image with maven & node & upload release asset

on:
  push:
    tags:
      - 'v*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
          check-latest: true

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          echo hello
          cd ./rackshift-web
          npm install
          npm run build
          rm -rf ../rackshift-server/src/main/resources/static
          mkdir -p ../rackshift-server/src/main/resources/static
          cp -r ./dist/* ../rackshift-server/src/main/resources/static
          cd ../
          mvn clean install -DskipTests
          cd ./rackshift-server
          sudo docker build -t rackshift/rackshift:actions .
          sudo docker login --username=${{secrets.DH_USERNAME}} --password=${{ secrets.DH_PWD }}
          sudo docker push rackshift/rackshift:actions
          sudo docker save -o rackshift.tar rackshift/rackshift:actions
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./rackshift.tar
          asset_name: rackshift.tar
          asset_content_type: application/zip